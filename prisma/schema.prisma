// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Original relations
  revenues      Revenue[]
  costs         Cost[]
  
  // New: Colleague relationships
  assetPartnerships     AssetPartnership[]
  revenueShares        RevenueShare[]
  costAttributions     CostAttribution[]
  
  // Partnership invitations
  sentInvitations      PartnershipInvitation[] @relation("InvitationSender")
  receivedInvitations  PartnershipInvitation[] @relation("InvitationReceiver")
  ownedAssets           AssetManagement[] @relation("AssetOwner")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bank {
  id        String            @id @default(cuid())
  name      String            @unique
  assets    AssetManagement[] @relation("BankAssets")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model AssetManagement {
  id          String    @id @default(cuid())
  assetType   String
  companyId   String
  assetName   String
  assetValue  Float?
  bankId      String?
  userId        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  company           Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  bank              Bank?           @relation("BankAssets", fields: [bankId], references: [id])
  owner           User?           @relation("AssetOwner", fields: [userId], references: [id])
  revenuesForBank   Revenue[]       @relation("BankAssetRevenues")
  costsForBank      Cost[]          @relation("BankAssetCosts")
  
  // New: Partnership system
  partnerships      AssetPartnership[]
  revenueShares     RevenueShare[]
  costAttributions  CostAttribution[]
  invitations       PartnershipInvitation[]
}

model Company {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  assets      AssetManagement[]
}

// New: Asset Partnership model
model AssetPartnership {
  id              String    @id @default(cuid())
  assetId         String
  userId          String
  sharePercentage Float     // Revenue share percentage (0-100)
  isActive        Boolean   @default(true)
  joinedAt        DateTime  @default(now())
  leftAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  asset AssetManagement @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([assetId, userId])
  @@index([assetId])
  @@index([userId])
}

// New: Partnership invitation system
model PartnershipInvitation {
  id          String                    @id @default(cuid())
  assetId     String
  senderId    String
  receiverId  String
  sharePercentage Float                 // Proposed share percentage
  status      InvitationStatus          @default(PENDING)
  message     String?
  expiresAt   DateTime?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  // Relations
  asset    AssetManagement @relation(fields: [assetId], references: [id], onDelete: Cascade)
  sender   User            @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User            @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([assetId, receiverId])
  @@index([receiverId])
  @@index([senderId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// Enhanced Revenue model with sharing
model Revenue {
  id                    String           @id @default(cuid())
  source                String
  amount                Float
  date                  DateTime         @default(now())
  description           String?
  bankAssetManagementId String?
  userId                String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // Relations
  bankAssetManagement AssetManagement? @relation("BankAssetRevenues", fields: [bankAssetManagementId], references: [id])
  user                User?            @relation(fields: [userId], references: [id])
  
  // New: Revenue sharing
  revenueShares       RevenueShare[]
}

// New: Revenue sharing model
model RevenueShare {
  id          String  @id @default(cuid())
  revenueId   String
  assetId     String
  userId      String
  shareAmount Float   // Calculated amount based on percentage
  percentage  Float   // Share percentage at time of revenue
  createdAt   DateTime @default(now())

  // Relations
  revenue Revenue         @relation(fields: [revenueId], references: [id], onDelete: Cascade)
  asset   AssetManagement @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([revenueId, userId])
  @@index([assetId])
  @@index([userId])
}

// Enhanced Cost model with attribution
model Cost {
  id                    String           @id @default(cuid())
  category              String
  amount                Float
  date                  DateTime         @default(now())
  description           String?
  bankAssetManagementId String?
  userId                String?          // User who incurred the cost
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // Relations
  bankAssetManagement AssetManagement? @relation("BankAssetCosts", fields: [bankAssetManagementId], references: [id])
  user                User?            @relation(fields: [userId], references: [id])
  
  // New: Cost attribution
  costAttributions    CostAttribution[]
}

// New: Cost attribution model
model CostAttribution {
  id           String  @id @default(cuid())
  costId       String
  assetId      String
  userId       String  // User responsible for this cost
  attributedAmount Float // Amount attributed to this user
  percentage   Float   // Percentage of total cost
  createdAt    DateTime @default(now())

  // Relations
  cost  Cost            @relation(fields: [costId], references: [id], onDelete: Cascade)
  asset AssetManagement @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([costId, userId])
  @@index([assetId])
  @@index([userId])
}